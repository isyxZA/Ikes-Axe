<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set game surface size....this will be stretched to fit window size
ww = 1024;
hh = 576;
blur = 0;
fullScreen = true;
global.debug = false;
global.game_surf = -1;
application_surface_enable(false);
//Antialiasing for systems that support it
if os_type == os_windows { if display_aa &gt; 12 display_reset(8, true); } 

//Greyscale Shader
uni_time = shader_get_uniform(shd_greyscale,"time");
var_time_var = 0;
uni_mouse_pos = shader_get_uniform(shd_greyscale,"mouse_pos");
var_pos_x = display_get_gui_width()*0.5;
var_pos_y = display_get_gui_height()*0.5;
uni_resolution = shader_get_uniform(shd_greyscale,"resolution");
var_resolution_x = display_get_gui_width();
var_resolution_y = display_get_gui_width();
uni_greyscale_fade = shader_get_uniform(shd_greyscale,"fade");
var_greyscale_fade = 0.55;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_Main_Menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_Pause); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Blur effect when boosting
if (global.blur == true) { blur += 0.01; }
    else {
        if (blur &gt; 0) { blur -= 0.02; }
        if (blur &lt; 0) { blur = 0; }
    }

if os_is_paused() &amp;&amp; os_type == os_android {
    if (room != rm_Main_Menu) &amp;&amp; (room != rm_Credits)&amp;&amp; (room != rm_Level_End) &amp;&amp; (room != rm_Controls){
        if (global.pause == false){
            global.pause = true;
            global.current_room = room;
            effect_clear();
            scr_Screen_Capture();
            audio_pause_all();
            room_goto(rm_Pause);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear game surface
if surface_exists(global.game_surf) { surface_free(global.game_surf); }

if os_type == os_android { draw_texture_flush(); }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add virtual buttons for touch devices
if os_type == os_android {
    switch room {
        case rm_Main_Menu:
        case rm_Pause:
            global.up = virtual_key_add(16, 408, 144, 144, vk_up);            
            global.down = virtual_key_add(16, 568, 144, 144, vk_down); 
            global.enter = virtual_key_add(1136, 576, 144, 144, vk_enter); 
            //virtual_key_show(global.up);
            //virtual_key_show(global.down);
            //virtual_key_show(global.enter);
            break;
        case rm_Controls:
        case rm_Credits:
            global.esc = virtual_key_add(1136, 576, 144, 144, vk_escape); 
            //virtual_key_show(global.esc);
            break;
        /*
        //For use with level picker
        case rm_Credits:
            global.up = virtual_key_add(16, 408, 144, 144, vk_up);            
            global.down = virtual_key_add(16, 568, 144, 144, vk_down); 
            global.esc = virtual_key_add(0, 0, 144, 144, vk_escape); 
            global.enter = virtual_key_add(1136, 576, 144, 144, vk_enter); 
            //virtual_key_show(global.enter);
            //virtual_key_show(global.esc);
            //virtual_key_show(global.up);
            //virtual_key_show(global.down);
            break;
        */
        case rm_Level_End:
        case rm_Game_Over:
            global.enter = virtual_key_add(1136, 576, 144, 144, vk_enter); 
            //virtual_key_show(global.enter);
            break;
        case rm_Tutorial:
            global.left = virtual_key_add(0, 576, 144, 144, ord("A"));             
            global.right = virtual_key_add(146, 576, 144, 144, ord("D")); 
            global.shootleft = virtual_key_add(990, 430, 144, 144, vk_left);           
            global.shootright = virtual_key_add(1136, 430, 144, 144, vk_right); 
            global.boost = virtual_key_add(990, 576, 144, 144, ord("S"));
            global.jump = virtual_key_add(1136, 576, 144, 144, vk_space);
            global.esc = virtual_key_add(0, 0, 144, 144, vk_escape); 
            //virtual_key_show(global.esc);
            //virtual_key_show(global.left);
            //virtual_key_show(global.right);
            //virtual_key_show(global.shootleft);
            //virtual_key_show(global.shootright);
            //virtual_key_show(global.boost);
            //virtual_key_show(global.jump);
            break;
        default:
            break;
    }  
}

/*
global.up = -1;
global.down = -1;
global.left = -1;
global.right = -1;
global.boost = -1;
global.jump = -1;
global.shootleft = -1;
global.shootright = -1;
global.esc = -1;
global.enter = -1;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the game surface     
switch os_type {
    case os_windows:
        if surface_exists(global.game_surf){
            var_time_var+=0.04;
            shader_set(shd_greyscale);
            shader_set_uniform_f(uni_time, var_time_var);
            shader_set_uniform_f(uni_mouse_pos, var_pos_x, var_pos_y);
            shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
            shader_set_uniform_f(uni_greyscale_fade, var_greyscale_fade);
            texture_set_interpolation(true);
            draw_enable_alphablend(false);
            draw_surface_stretched(global.game_surf, 0, 0, window_get_width(), window_get_height());
            shader_reset();
            draw_enable_alphablend(true); 
        }
            else {
                //Make sure the surface always exists
                global.game_surf = surface_create(ww, hh);
                surface_set_target(global.game_surf);
                surface_reset_target();
                draw_clear(c_black);
                display_set_gui_size(window_get_width(), window_get_height()); 
                view_surface_id[0] = global.game_surf;
            }
        /*
        if global.debug == true {
            draw_set_font(fnt_30);
            draw_set_halign(fa_left);
            draw_text(32, 32, string(fps));
            draw_set_font(fnt_12);
        }
        */
        break;
    case os_android:
        if surface_exists(global.game_surf) {
            texture_set_interpolation(true);
            draw_enable_alphablend(false);
            draw_surface_stretched(global.game_surf, 0, 0, display_get_width(), display_get_height());
            draw_enable_alphablend(true); 
        }
            else {
                //Make sure the surface always exists
                global.game_surf = surface_create(ww, hh);
                surface_set_target(global.game_surf);
                surface_reset_target();
                draw_clear(c_black);
                display_set_gui_size(display_get_width(), display_get_height()); 
                view_surface_id[0] = global.game_surf;
            }
        switch room {
            case rm_Main_Menu:
            case rm_Pause:
                draw_sprite(spr_Up,0, 40, 432);
                draw_sprite(spr_Down,0, 40, 592);
                draw_sprite(spr_Enter,0, 1160, 600);
                break;
            case rm_Controls:
            case rm_Credits:
                draw_sprite(spr_Enter,0, 1112, 600);
                break;
            /*
            //For use with level picker
            case rm_Credits:
                draw_sprite(spr_Up,0, 40, 432);
                draw_sprite(spr_Down,0, 40, 592);
                draw_sprite(spr_Menu,0, 24, 24);
                draw_sprite(spr_Enter,0, 1160, 600);
                break;
            */
            case rm_Level_End:
            case rm_Game_Over:
                draw_sprite(spr_Enter,0, 1160, 600);
                break;
            case rm_Tutorial:
                draw_sprite(spr_Left,0, 24, 600);
                draw_sprite(spr_Right,0, 170, 600);
                draw_sprite(spr_Square,0, 1014, 454);
                draw_sprite(spr_Triangle,0, 1160, 454);
                draw_sprite(spr_X,0, 1014, 600);
                draw_sprite(spr_O,0, 1160, 600);
                draw_sprite(spr_Menu,0, 24, 24);
                break;
            default:
                break;
        } 
        /*
        if global.debug == true { 
            draw_set_font(fnt_30);
            draw_set_halign(fa_left);
            draw_set_colour(c_white);
            draw_text(32, 32, string(fps));
        }
        */
        break;
}








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle Fullscreen
if os_type != os_android {
    if (fullScreen == false) {
        window_set_fullscreen(true);
        fullScreen = true;
    }
        else if (fullScreen == true){
            window_set_fullscreen(false);
            fullScreen = false;
        }
    display_set_gui_size(window_get_width(), window_get_height()); 
    var_pos_x = display_get_gui_width()*0.5;
    var_pos_y = display_get_gui_height()*0.5;
    var_resolution_x = display_get_gui_width();
    var_resolution_y = display_get_gui_width();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debug == false){
    global.debug = true;
    show_debug_overlay(true);
}
    else if (global.debug == true){
        global.debug = false;
        show_debug_overlay(false);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle Pause
if (global.transition == false){

    if (room != rm_Main_Menu) &amp;&amp; (room != rm_Credits)&amp;&amp; (room != rm_Level_End) &amp;&amp; (room != rm_Controls)&amp;&amp; (room != rm_Game_Over){
        if (global.pause == false){
            global.pause = true;
            global.current_room = room;
            effect_clear();
            scr_Screen_Capture();
            audio_pause_all();
            room_goto(rm_Pause);
        }
            else if (global.pause == true){
                global.pause = false;
                global.pause_bg = -1;
                audio_resume_all();
                room_goto(global.current_room);
            }
    }
    
    if (room == rm_Credits)||(room == rm_Controls){
        if global.is_paused == true { 
            global.is_paused = false; 
            global.transition = true;
            alarm[0] = 60;
        }
            else { 
                global.transition = true;
                alarm[1] = 60;
            }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
