<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Hammer_Anchor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anchor = instance_create(x, y, obj_Hammer_Anchor);
hammer = instance_create(x, y, obj_Hammer_Pole);

hammer_joint = physics_joint_revolute_create(
    anchor, hammer, x, y, //Objects set up 
    -120, 120, false, // Angle limits
    1000000, 1000000, true, // Motor torque limits
    false
)

spd = 0;
spd_joint = 0;
target_spd = 6;
spd_count = 0;
spd_duration = 20;
alternate = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if alternate == true {
    if hammer.image_angle &lt; -100 { 
        alternate = false;
        //spd = physics_joint_get_value(hammer_joint, phy_joint_motor_speed);
        target_spd = -6; 
        spd_count = 0;
    }
        else if hammer.image_angle &gt; 100 { 
            alternate = false;
            //spd = physics_joint_get_value(hammer_joint, phy_joint_motor_speed);
            target_spd = 6; 
            spd_count = 0;
        }
}

if spd_count &lt; spd_duration {
    spd_count++;
    spd_joint = ease_inout_sine(spd_count, spd, target_spd, spd_duration);
}
    else if spd_count == spd_duration {
        if alternate ==  false { alternate = true; }
    }

physics_joint_set_value(hammer_joint, phy_joint_motor_speed, spd_joint);

anchor.rot += spd_joint;
hammer.rot += spd_joint;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.debug == true {
    var s = physics_joint_get_value(hammer_joint, phy_joint_motor_speed);
    draw_text(x, y-32, string(s));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
