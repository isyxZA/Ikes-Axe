<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a = 0;
step_count = 0;
global.minutes = 0;
global.seconds = 0;

//PP variables
colour_1 = make_colour_rgb(255, 255, 255);
colour_2 = make_colour_rgb(255, 255, 255);
a_1 = 0;
blend_mode_1 = bm_normal;

health_x = view_xview[0]+view_wview[0]*0.25;
jump_x = view_xview[0]+view_wview[0]*0.5;
boost_x = view_xview[0]+view_wview[0]*0.75;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.bonus_six = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.bonus_count = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Timer control
if (global.lt_run == true) {
    if (global.pause == false) {
        step_count += 1;
        global.seconds = step_count/room_speed;
        if (global.seconds &gt;= 60) {
            global.minutes += 1;
            global.seconds = 0;
            step_count = 0;
        }
    }
}

if (global.lt_reset == true) {
    step_count = 0;
    global.minutes = 0;
    global.seconds = 0;
    //milisec = 0;
}

//Level timer as global value in string
global.level_timer = string(string(global.minutes) + ":" + string(global.seconds));

//Calculate Combo Bonuses
if (global.bonus_count == 0){
    alarm[0] = 55;
}
if (global.bonus_count == 3){
    instance_create((view_xview[0]+(view_wview[0]*0.5)), view_yview[0]+(view_hview[0]*0.6), obj_Combo_Text);
    global.bonus_count = 0;
}

if (global.bonus_six == 0){
    alarm[1] = 185;
}
if (global.bonus_six == 7){
    instance_create((view_xview[0]+(view_wview[0]*0.5)), view_yview[0]+(view_hview[0]*0.7), obj_Combo_Text_Yellow);
    global.bonus_six = 0;
}


//End of level transition effect
if global.transition == true { if (a &lt; 1) { a = lerp(a, 1, 0.05); } }
if global.transition == false { if (a &gt; 0) { a = lerp(a, 0, 0.01); } }
    
if a &lt;= 0 { a = 0; }
if a &gt;= 1 { a = 1; }

//Go to next level at end of transition 
if (global.end_level == true){
    audio_stop_all();
    /*
    switch (room){
        case rm_Tutorial:
            global.biplane_joined = false;
            global.rocket_joined = false;
            break;
        default:
            break;
    }
    */
    global.is_dead = false;
    global.end_level = false;
    room_goto(rm_Level_End);
} 



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.transition = false;
colour_1 = make_colour_rgb(255, 255, 255);
colour_2 = make_colour_rgb(255, 255, 255);
a_1 = 0;
blend_mode_1 = bm_add;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the scores, level transition effect and some PP effects
/*
//PP effects
draw_set_blend_mode(blend_mode_1);    
draw_set_alpha(a_1);
draw_rectangle_colour(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], colour_1, colour_1, colour_2, colour_2, 0);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal); 
*/

draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_colour(make_colour_rgb(255,215,0));

//Draw HUD
switch (room) {
    case rm_Tutorial:
        scr_Draw_HUD_1024x576();
        break;
    default:
        //scr_Draw_HUD_1024x576();
        break; 
}


//Level end transition
draw_set_alpha(a);
draw_rectangle_colour(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], c_black, c_black, c_black, c_black, 0);
draw_set_alpha(1);





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
