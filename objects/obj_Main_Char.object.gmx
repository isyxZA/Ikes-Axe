<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_IDLE_0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>obj_Dynamic_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_rotation = 0;

global.x = phy_position_x;
global.y = phy_position_y;
global.dir = 0;
global.bullet = obj_Axe_Reg;
global.biplane_joined = false;
global.rocket_joined = false;
global.shield_joint = true;
global.checkpointX = xstart;
global.checkpointY = ystart;
global.move_speed = 2200;
global.speed_boost = 1.75;

//Player health
switch (global.green){
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
        global.hp = 100;
        break;
}
health = global.hp;
//Jump force
switch (global.yellow){
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
        global.jump_force = -600;
        jump_incr = 50;
        break;
}
//Boost duration
switch (global.blue){
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
        global.boost_duration = 2;
        break;
}
//Axe power
switch (global.red){
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
        global.axe_boost_r = 0;
        global.axe_boost_l = 0;
        break;
}

state = "IDLE";
image_speed = 0.1;
in_air = false;
air_timer = 20;
decel_count = 0;
decel_duration = 10;
on_ground = false;
hold_position = false;
set_moveR = true;
set_moveL = true;
pulse_l = true;
pulse_r = true;
can_skip = true;
can_boost = true;
can_cooldown = false;
moving = false;
stop_effect = false;
jump_x = 0;
parachute = true;
can_parachute = true;
chute_timer = 0;
buffer = 300;
bullet = -1;
bullet_x_l = 0;
bullet_x_r = 0;
bullet_y = 0;
power_adjust_r = 10;
power_adjust_l = 10;
boost = false;
pwrup = false;
shooting = false;
hurting = false;
jumping = false;
can_die = true;
if health == 200 { aura = 4; }
    else if health &lt; 200 &amp;&amp; health &gt;= 175 { aura = 3; }
        else if health &lt; 175 &amp;&amp; health &gt;= 150 { aura = 2; }
            else if health &lt; 150 &amp;&amp; health &gt; 100 { aura = 1; }
                else { aura = 0; }
light_size = 2;
light_strength = 0.5;
expression_index = spr_IDLE_E_0;
hat_index = spr_Hat_rt;
hat_adjust = false;
hat_pos = 0;

//Spawn axe
hand = instance_create(x, y+12, obj_Main_Char_Hand);
physics_joint_rope_create(self, hand, phy_position_x, phy_position_y+12, hand.x, hand.y, 1, false);



    








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();
room_goto(rm_Game_Over);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_die = true;
global.can_move = true;
global.can_jump = true;
global.rocket_move = true;
global.can_shoot = true;
health = global.hp;
global.dir = 0;
jumping = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shooting = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumping = false;
global.can_jump = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hurting = false;
hat_adjust = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_parachute = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_skip = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hold_position = false;
global.is_dead = false;
global.dir = 0;

phy_position_x = global.checkpointX;
phy_position_y = global.checkpointY;  

phy_speed_x = 0;
phy_speed_y = 0;

with (obj_Main_Char_Hand){
    phy_position_x = global.checkpointX;
    phy_position_y = global.checkpointY;
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset powerup status
pwrup = false;
global.bullet = obj_Axe_Reg;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.x = phy_position_x;
global.y = phy_position_y;

//Character rotation and expression control
if hurting == true {
    stop_effect = false;
    phy_rotation = clamp(phy_rotation, -30, 30); 
}
    else if boost == true { phy_rotation = clamp(phy_rotation, -12, 12); }
        else if moving == true { phy_rotation = clamp(phy_rotation, -6, 6); }
            else { phy_rotation = clamp(phy_rotation, -3, 3); }

if moving == false {
    if (on_ground == true) { 
        global.move_speed = 2200;
        if (phy_speed_y &lt; 0.2) &amp;&amp; (phy_speed_x != 0) { phy_speed_x = lerp(phy_speed_x, 0, 0.5); }
        if (stop_effect == true) &amp;&amp; (abs(phy_speed_x) &gt;= 4) {
            stop_effect = false;
            if phy_speed_x &gt; 0 {  
                with instance_create(x+16, y+22, obj_Stop_Effect) { x_force = 6; } 
                with instance_create(x+16, y+22, obj_Stop_Effect) { x_force = 8; } 
                with instance_create(x+16, y+22, obj_Stop_Effect) { x_force = 10; } 
            }
                else {  
                    with instance_create(x-16, y+22, obj_Stop_Effect) { x_force = -6; } 
                    with instance_create(x-16, y+22, obj_Stop_Effect) { x_force = -8; } 
                    with instance_create(x-16, y+22, obj_Stop_Effect) { x_force = -10; } 
                }
        }
    }
}
    else if moving == true {
        if stop_effect == false { if abs(phy_speed_x) &gt;= 12 { stop_effect = true; } }
        if decel_count &lt; decel_duration {
            decel_count ++; 
            //Horizontal speed control
            global.move_speed = ease_in_expo(decel_count, 2200, -800, decel_duration);
        }
    }

//Sprite control
switch (state){
    case "IDLE": 
        if global.dir == 0 { 
            sprite_index = spr_IDLE_0; 
            if hurting == true { expression_index = spr_HURT_E_0; }
                else if shooting == true { expression_index = spr_ATTACK_E_0; }
                    else { expression_index = spr_IDLE_E_0; }
            hat_index = spr_Hat_rt;
        }
            else if global.dir == 1 { 
                sprite_index = spr_IDLE_1; 
                if hurting == true { expression_index = spr_HURT_E_1; }
                    else if shooting == true { expression_index = spr_ATTACK_E_1; }
                        else { expression_index = spr_IDLE_E_1; }
                hat_index = spr_Hat_lt;
            }
        break;
    case "WALKING": 
        if global.dir == 0 { 
            sprite_index = spr_WALK_0; 
            hat_index = spr_Hat_rt;
            if hurting == true { expression_index = spr_HURT_E_0; }
                else if shooting == true { expression_index = spr_ATTACK_E_0; }
                    else if boost == true { expression_index = spr_BOOST_E_0; }
                        else {expression_index = spr_WALK_E_0; }
        }
            else if global.dir == 1 { 
                sprite_index = spr_WALK_1; 
                hat_index = spr_Hat_lt;
                if hurting == true { expression_index = spr_HURT_E_1; }
                    else if shooting == true { expression_index = spr_ATTACK_E_1; }
                        else if boost == true { expression_index = spr_BOOST_E_1; }
                            else { expression_index = spr_WALK_E_1; }
            }
        break;
    case "JUMPING": 
        if global.dir == 0 { 
            sprite_index = spr_JUMP_0;
            hat_index = spr_Hat_rt; 
            if hurting == true { expression_index = spr_HURT_E_0; }
                else if shooting == true { expression_index = spr_ATTACK_E_0; }
                    else { expression_index = spr_WALK_E_0; }
        }
            else if global.dir == 1 { 
                sprite_index = spr_JUMP_1; 
                hat_index = spr_Hat_lt;
                if hurting == true { expression_index = spr_HURT_E_1; }
                    else if shooting == true { expression_index = spr_ATTACK_E_1; }
                        else { expression_index = spr_WALK_E_1; }
            }
        break;
    default: 
        if global.dir == 0 { 
            sprite_index = spr_IDLE_0; 
            hat_index = spr_Hat_rt;
            expression_index = spr_IDLE_E_0;
        }
            else if global.dir == 1 { 
                sprite_index = spr_IDLE_1; 
                hat_index = spr_Hat_lt;
                expression_index = spr_IDLE_E_1;
            } 
        break;
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.biplane_joined != true) &amp;&amp; (global.rocket_joined != true) {
    if collision_circle(phy_position_x, phy_position_y+20, 8, obj_Brick, true, true) {
        in_air = false;
        on_ground = true;
    }
        else {
            in_air = true;
            on_ground = false;
        }
}
    else {
        in_air = true;
        on_ground = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hold_position == false { 
    //Control level of descent
    if in_air == true {
        state = "JUMPING";
        image_index = -(phy_speed_y);
        image_index = clamp(image_index, 0, 7);
        air_timer ++;
        //No parachute
        if parachute == true { 
            chute_timer = 0;
            if phy_linear_damping &lt; 3 { phy_linear_damping += 0.04; }
            if air_timer &gt;= 100 { 
                physics_apply_force(x, y, 0, 1200); 
            }
                else if air_timer &gt;= 80 { 
                    physics_apply_force(x, y, 0, 1000); 
                }
                    else if air_timer &gt;= 60 { 
                        physics_apply_force(x, y, 0, 900); 
                    }
                        else if air_timer &gt;= 40 { 
                            physics_apply_force(x, y, 0, 800); 
                        }
                            else if air_timer &gt;= 20 { 
                                physics_apply_force(x, y, 0, 700); 
                            }
            if can_parachute == true { 
                if (air_timer &gt; 40) &amp;&amp; (phy_speed_y &gt;= 6) { 
                    if keyboard_check_pressed(ord("W")) {
                        parachute = false;
                        stop_effect = false;    
                        instance_create(phy_position_x, phy_position_y-168, obj_Parachute_rt); 
                        physics_apply_impulse(x, y, 0, -600);
                    }
                }
            }
        }
            //With parachute
            else if parachute == false { 
                //If player input
                //Less downforce
                if moving == true { physics_apply_force(x, y, 0, -1600); }
                    //No player input
                    //Faster descent
                    else { physics_apply_force(x, y, 0, -500); }
                //Remove parachute
                if keyboard_check_pressed(ord("W")) || place_meeting(phy_position_x, phy_position_y, obj_Brick) {
                    with (obj_Parachute_rt) { instance_destroy(); } 
                        parachute = true;
                }
                    else if (phy_speed_y &lt;= -0.3) { 
                        chute_timer ++;
                        if chute_timer &gt;= 10 {
                            with (obj_Parachute_rt) { instance_destroy(); } 
                            parachute = true;
                        }
                    }
                        else { chute_timer = 0; }
            }
    }
        else if on_ground == true {
            if jumping == true { 
                state = "JUMPING"; 
                image_index = 0;
            }
                else if moving == true { 
                    state = "WALKING"; 
                    image_speed = abs(phy_speed_x)*0.05;
                } 
                    else { 
                        state = "IDLE"; 
                        image_speed = 0.1;
                    }
            if jumping == true { air_timer = 0; } else { air_timer = 20; }
            phy_linear_damping = 1;
            //If the parachute is deployed
            if parachute == false { 
                parachute = true;
                with (obj_Parachute_rt) { instance_destroy(); } 
            } 
        }
}
    else if hold_position == true { 
        phy_position_x = 80; 
        phy_position_y = 80;
    }

if boost == true {
    if (global.timer &lt;= 0){
        global.timer = 0;
        global.blur = false;
        global.can_shoot = true;
        global.incr = 0;
        global.rocket_boost = false;
        boost = false;
        can_boost = false;
        can_cooldown = false;
        incr = -10;
    }
    if (global.timer &gt;= global.boost_duration){
        global.blur = true;
        global.timer -= global.boost_duration;
    }
}

//Boost cooldown/recharge
if (can_cooldown == true){
    if (global.timer &lt; 100){
        global.timer += (global.boost_duration*2);
    }
        else if (global.timer &gt;= 100){
            can_cooldown = false;
            global.timer = 100;
        }
}

//Jump cooldown/recharge
if (global.can_jump == true) &amp;&amp; (on_ground == true){
    if(global.jump_draw &lt; 100) { global.jump_draw += jump_incr; }
    if(global.jump_draw &gt; 100) { global.jump_draw = 100; }
}

if (hat_adjust == true) {
    if (hat_pos &gt; 0){
        hat_pos -= 1;
    }
        else if (hat_pos &lt;= 0){
            hat_adjust = false;
            hat_pos = 0;
        }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if can_boost == true {
    if global.biplane_joined == true || global.rocket_joined == true {
        if (global.rocket_move == true) {
            global.rocket_boost = true;
            boost = true;
        }
    }
        else if on_ground == true {
            if moving = true { boost = true; }
        }
            else {
                boost = false;
                global.blur = false;
                global.rocket_boost = false;
            }
}

can_cooldown = false;
global.incr = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !keyboard_check_direct(ord("A")) { 
    global.dir = 0;
    if set_moveR = true { 
        set_moveR = false;
        global.move_speed = 2200;
    }
    if global.can_move == true {
        moving = true;
        if on_ground == true {
            if boost == false { physics_apply_force(x, y, global.move_speed, 0); }
                else { physics_apply_force(x, y, global.move_speed*global.speed_boost, 0); }
            if can_skip == true{
                physics_apply_impulse(x, y, 10, -100);
                can_skip = false;
                alarm[3] = 15;
            }
        }
            else if in_air == true { physics_apply_force(x, y, global.move_speed, 0); }
    }
        else if global.can_move == false {
            if global.biplane_joined == true {
                if (global.rocket_move == true) {
                    if global.rocket_boost == true { physics_apply_force(x, y, 1600, 0); }
                        else { physics_apply_force(x, y, 800, 0); }
                    with(obj_BiPlane) { move_right = true; } 
                }
            }
            if global.rocket_joined == true {
                if (global.rocket_move == true) {
                    if global.rocket_boost == true { physics_apply_force(x, y, 2000, 0); }
                        else { physics_apply_force(x, y, 1000, 0); }
                    with(obj_Rocketship) { move_right = true; } 
                }
            }
        }
}


        

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !keyboard_check_direct(ord("D")) { 
    global.dir = 1;
    if set_moveL = true { 
        set_moveL = false;
        global.move_speed = 2200;
    }
    if global.can_move == true {
        moving = true;
        if on_ground == true {
            if boost == false { physics_apply_force(x, y, -global.move_speed, 0); }
                else { physics_apply_force(x, y, -global.move_speed*global.speed_boost, 0); }
            if can_skip == true{
                physics_apply_impulse(x, y, -10, -100);
                can_skip = false;
                alarm[3] = 15;
            }
        }
            //In air
            else if in_air == true { physics_apply_force(x, y, -global.move_speed, 0); }
    }
        else if global.can_move == false {
            if global.biplane_joined == true {
                if (global.rocket_move == true) {
                    if global.rocket_boost == true { physics_apply_force(x, y, -1600, 0); }
                        else { physics_apply_force(x, y, -800, 0); }
                    with(obj_BiPlane) { move_left = true; } 
                }
            }
            
            if global.rocket_joined == true {
                if (global.rocket_move == true) {
                    if global.rocket_boost == true { physics_apply_force(x, y, -2000, 0); }
                        else { physics_apply_force(x, y, -1000, 0); }
                    with(obj_Rocketship) { move_left = true; } 
                }
            }
        }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[7] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[7] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Adjusted bullet throw power
if (global.dir == 0) {
    //Facing RIGHT 
    power_adjust_r = max(400, phy_speed_x*100); 
    // Updates for powerups
    switch(global.bullet) {
        case obj_Axe_Gold:
            bullet_y = -120;
            bullet_x_r = 400+(power_adjust_r+global.axe_boost_r);
            break;     
        case obj_Axe_Reg:
            bullet_y = -100;
            bullet_x_r = 300+(power_adjust_r+global.axe_boost_r);
            break;
        default:
            bullet_y = -14;
            bullet_x_r = 50;
            break;
    }
    //Shoot right
    if (global.can_shoot == true){
        bullet = instance_create(x, y-20, global.bullet);
        with(bullet) {
            x_imp = other.bullet_x_r;
            y_imp = other.bullet_y;
            physics_apply_impulse(phy_position_x, phy_position_y-8, x_imp, y_imp);
        }
        audio_play_sound(choose(snd_Axe_Throw, snd_Axe_Throw_01,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw), 30, false);
        shooting = true;
        global.can_shoot = false;
        switch(global.bullet) {
            case obj_Axe_Reg:
                alarm[0] = 20;
                break;
            default: 
                alarm[0] = 20; 
                break;
        }
    }
}
    else if (global.dir == 1) {
        //Facing LEFT
        power_adjust_l = min(-400, phy_speed_x*100);
        // Updates for powerups
        switch (global.bullet){
            case obj_Axe_Gold:
                bullet_y = -120;
                bullet_x_l = -400+(power_adjust_l+global.axe_boost_l);
                break;      
            case obj_Axe_Reg:
                bullet_y = -100;
                bullet_x_l = -300+(power_adjust_l+global.axe_boost_l);
                break;
            default:
                bullet_y = -14;
                bullet_x_l = -50;
                break;
        }
        //Shoot left
        if (global.can_shoot == true){
            bullet = instance_create(x, y-20, global.bullet);
            with(bullet) {
                x_imp = other.bullet_x_l;
                y_imp = other.bullet_y;
                physics_apply_impulse(phy_position_x, phy_position_y-8, x_imp, y_imp);
            }
            audio_play_sound(choose(snd_Axe_Throw, snd_Axe_Throw_01,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw), 30, false);
            shooting = true;
            global.can_shoot = false;
            switch(global.bullet) {
                case obj_Axe_Reg:
                    alarm[0] = 20;
                    break;
                default: 
                    alarm[0] = 20; 
                    break;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Adjusted bullet throw power
if (global.dir == 0) {
    //Facing RIGHT 
    power_adjust_r = max(400, phy_speed_x*100); 
    // Updates for powerups
    switch(global.bullet) {
        case obj_Axe_Gold:
            bullet_y = -120;
            bullet_x_r = 400+(power_adjust_r+global.axe_boost_r);
            break;     
        case obj_Axe_Reg:
            bullet_y = -100;
            bullet_x_r = 300+(power_adjust_r+global.axe_boost_r);
            break;
        default:
            bullet_y = -14;
            bullet_x_r = 50;
            break;
    }
    //Shoot right
    if (global.can_shoot == true){
        bullet = instance_create(x, y-20, global.bullet);
        with(bullet) {
            x_imp = other.bullet_x_r;
            y_imp = other.bullet_y;
            physics_apply_impulse(phy_position_x, phy_position_y-8, x_imp, y_imp);
        }
        audio_play_sound(choose(snd_Axe_Throw, snd_Axe_Throw_01,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw), 30, false);
        shooting = true;
        global.can_shoot = false;
        switch(global.bullet) {
            case obj_Axe_Reg:
                alarm[0] = 20;
                break;
            default: 
                alarm[0] = 20; 
                break;
        }
    }
}
    else if (global.dir == 1) {
        //Facing LEFT
        power_adjust_l = min(-400, phy_speed_x*100);
        // Updates for powerups
        switch (global.bullet){
            case obj_Axe_Gold:
                bullet_y = -120;
                bullet_x_l = -400+(power_adjust_l+global.axe_boost_l);
                break;      
            case obj_Axe_Reg:
                bullet_y = -100;
                bullet_x_l = -300+(power_adjust_l+global.axe_boost_l);
                break;
            default:
                bullet_y = -14;
                bullet_x_l = -50;
                break;
        }
        //Shoot left
        if (global.can_shoot == true){
            bullet = instance_create(x, y-20, global.bullet);
            with(bullet) {
                x_imp = other.bullet_x_l;
                y_imp = other.bullet_y;
                physics_apply_impulse(phy_position_x, phy_position_y-8, x_imp, y_imp);
            }
            audio_play_sound(choose(snd_Axe_Throw, snd_Axe_Throw_01,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw), 30, false);
            shooting = true;
            global.can_shoot = false;
            switch(global.bullet) {
                case obj_Axe_Reg:
                    alarm[0] = 20;
                    break;
                default: 
                    alarm[0] = 20; 
                    break;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(can_die == true) { scr_PlayerDeath(); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Autosave at beginning of room
if(room != global.current_room) { scr_Save_Game(); }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>health = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(aura) {
    case 1:
        if (global.biplane_joined == true){
            if (global.dir == 0) { draw_sprite(spr_BiPlane_Aura, 0, x, y-4); }
            if (global.dir == 1) { draw_sprite(spr_BiPlane_Aura_lt, 0, x, y-4); }
        }
            else if (global.rocket_joined == true){
                if (global.dir == 0) { draw_sprite(spr_Rocketship_Aura, 0, x, y-4); }
                if (global.dir == 1) { draw_sprite(spr_Rocketship_Aura_lt, 0, x, y-4); }
            }
                else{
                    draw_sprite_ext(spr_Health_Shield, 0, x, y-4, 1, 1, image_angle, c_white, 0.25);
                }
        break;
    case 2:
        if (global.biplane_joined == true){
            if (global.dir == 0) { draw_sprite(spr_BiPlane_Aura, 0, x, y-4); }
            if (global.dir == 1) { draw_sprite(spr_BiPlane_Aura_lt, 0, x, y-4); }
        }
            else if (global.rocket_joined == true){
                if (global.dir == 0) { draw_sprite(spr_Rocketship_Aura, 0, x, y-4); }
                if (global.dir == 1) { draw_sprite(spr_Rocketship_Aura_lt, 0, x, y-4); }
            }
                else {
                    draw_sprite_ext(spr_Health_Shield, 0, x, y-4, 1, 1, image_angle, c_white, 0.5);
                }
        break;
    case 3:
        if (global.biplane_joined == true){
            if (global.dir == 0) { draw_sprite(spr_BiPlane_Aura, 0, x, y-4); }
            if (global.dir == 1) { draw_sprite(spr_BiPlane_Aura_lt, 0, x, y-4); }
        }
            else if (global.rocket_joined == true){
                if (global.dir == 0) { draw_sprite(spr_Rocketship_Aura, 0, x, y-4); }
                if (global.dir == 1) { draw_sprite(spr_Rocketship_Aura_lt, 0, x, y-4); }
            }
                else {
                    draw_sprite_ext(spr_Health_Shield, 0, x, y-4, 1, 1, image_angle, c_white, 0.75);
                }
        break;
    case 4:
        if (global.biplane_joined == true){
            if (global.dir == 0) { draw_sprite(spr_BiPlane_Aura, 0, x, y-4); }
            if (global.dir == 1) { draw_sprite(spr_BiPlane_Aura_lt, 0, x, y-4); }
        }
        else if (global.rocket_joined == true){
            if (global.dir == 0) { draw_sprite(spr_Rocketship_Aura, 0, x, y-4); }
            if (global.dir == 1) { draw_sprite(spr_Rocketship_Aura_lt, 0, x, y-4); }
        }
            else {
                draw_sprite_ext(spr_Health_Shield, 0, x, y-4, 1, 1, image_angle, c_white, 1);
            }
        break;
    default:
        break;
}

draw_set_blend_mode(bm_add);
draw_sprite_ext(spr_Player_Glow, 0, phy_position_x, phy_position_y, 1.5, 1.5, image_angle, c_white, 0.5);
draw_set_blend_mode(bm_normal);
draw_self();
draw_sprite_ext(expression_index, image_index, phy_position_x, phy_position_y, 1, 1, image_angle, c_white, 1);
draw_sprite_ext(hat_index, 0, phy_position_x, phy_position_y-hat_pos, 1, 1, image_angle, c_white, 1);

if global.debug == true {
    draw_set_alpha(0.5);
    draw_circle_colour( phy_position_x, phy_position_y+20, 8, c_red, c_red, false);
    draw_set_alpha(1);
    var txt;
    if on_ground == true { txt = "GROUND"; }
        else if in_air == true { txt = "AIR"; }
            else { txt = ""; }
    
    draw_set_halign(fa_center);
    draw_text(x, y-42, txt);
    draw_text(x, y-56, string(chute_timer));
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Adjusted bullet throw power
if (global.dir == 0) {
    //Facing RIGHT 
    power_adjust_r = max(400, phy_speed_x*100); 
    // Updates for powerups
    switch(global.bullet) {
        case obj_Axe_Gold:
            bullet_y = -120;
            bullet_x_r = 400+(power_adjust_r+global.axe_boost_r);
            break;     
        case obj_Axe_Reg:
            bullet_y = -100;
            bullet_x_r = 300+(power_adjust_r+global.axe_boost_r);
            break;
        default:
            bullet_y = -14;
            bullet_x_r = 50;
            break;
    }
    //Shoot right
    if (global.can_shoot == true){
        bullet = instance_create(x, y-20, global.bullet);
        with(bullet) {
            x_imp = other.bullet_x_r;
            y_imp = other.bullet_y;
            physics_apply_impulse(phy_position_x, phy_position_y-8, x_imp, y_imp);
        }
        audio_play_sound(choose(snd_Axe_Throw, snd_Axe_Throw_01,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw), 30, false);
        shooting = true;
        global.can_shoot = false;
        switch(global.bullet) {
            case obj_Axe_Reg:
                alarm[0] = 20;
                break;
            default: 
                alarm[0] = 20; 
                break;
        }
    }
}
    else if (global.dir == 1) {
        //Facing LEFT
        power_adjust_l = min(-400, phy_speed_x*100);
        // Updates for powerups
        switch (global.bullet){
            case obj_Axe_Gold:
                bullet_y = -120;
                bullet_x_l = -400+(power_adjust_l+global.axe_boost_l);
                break;      
            case obj_Axe_Reg:
                bullet_y = -100;
                bullet_x_l = -300+(power_adjust_l+global.axe_boost_l);
                break;
            default:
                bullet_y = -14;
                bullet_x_l = -50;
                break;
        }
        //Shoot left
        if (global.can_shoot == true){
            bullet = instance_create(x, y-20, global.bullet);
            with(bullet) {
                x_imp = other.bullet_x_l;
                y_imp = other.bullet_y;
                physics_apply_impulse(phy_position_x, phy_position_y-8, x_imp, y_imp);
            }
            audio_play_sound(choose(snd_Axe_Throw, snd_Axe_Throw_01,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw), 30, false);
            shooting = true;
            global.can_shoot = false;
            switch(global.bullet) {
                case obj_Axe_Reg:
                    alarm[0] = 20;
                    break;
                default: 
                    alarm[0] = 20; 
                    break;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Adjusted bullet throw power
if (global.dir == 0) {
    //Facing RIGHT 
    power_adjust_r = max(400, phy_speed_x*100); 
    // Updates for powerups
    switch(global.bullet) {
        case obj_Axe_Gold:
            bullet_y = -120;
            bullet_x_r = 400+(power_adjust_r+global.axe_boost_r);
            break;     
        case obj_Axe_Reg:
            bullet_y = -100;
            bullet_x_r = 300+(power_adjust_r+global.axe_boost_r);
            break;
        default:
            bullet_y = -14;
            bullet_x_r = 50;
            break;
    }
    //Shoot right
    if (global.can_shoot == true){
        bullet = instance_create(x, y-20, global.bullet);
        with(bullet) {
            x_imp = other.bullet_x_r;
            y_imp = other.bullet_y;
            physics_apply_impulse(phy_position_x, phy_position_y-8, x_imp, y_imp);
        }
        audio_play_sound(choose(snd_Axe_Throw, snd_Axe_Throw_01,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw), 30, false);
        shooting = true;
        global.can_shoot = false;
        switch(global.bullet) {
            case obj_Axe_Reg:
                alarm[0] = 20;
                break;
            default: 
                alarm[0] = 20; 
                break;
        }
    }
}
    else if (global.dir == 1) {
        //Facing LEFT
        power_adjust_l = min(-400, phy_speed_x*100);
        // Updates for powerups
        switch (global.bullet){
            case obj_Axe_Gold:
                bullet_y = -120;
                bullet_x_l = -400+(power_adjust_l+global.axe_boost_l);
                break;      
            case obj_Axe_Reg:
                bullet_y = -100;
                bullet_x_l = -300+(power_adjust_l+global.axe_boost_l);
                break;
            default:
                bullet_y = -14;
                bullet_x_l = -50;
                break;
        }
        //Shoot left
        if (global.can_shoot == true){
            bullet = instance_create(x, y-20, global.bullet);
            with(bullet) {
                x_imp = other.bullet_x_l;
                y_imp = other.bullet_y;
                physics_apply_impulse(phy_position_x, phy_position_y-8, x_imp, y_imp);
            }
            audio_play_sound(choose(snd_Axe_Throw, snd_Axe_Throw_01,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw,snd_Axe_Throw), 30, false);
            shooting = true;
            global.can_shoot = false;
            switch(global.bullet) {
                case obj_Axe_Reg:
                    alarm[0] = 20;
                    break;
                default: 
                    alarm[0] = 20; 
                    break;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.dir == 0){ jump_x = 12;  }
if (global.dir == 1){ jump_x = -12; }

if global.biplane_joined == true{
    if (global.rocket_move == true) {
        physics_apply_force(x, y, 0, -1100);
        jumping = false;
        with(obj_BiPlane) { move_up = true; } 
    }
}
    else if global.rocket_joined == true{
        if (global.rocket_move == true) {
            jumping = false;
            physics_apply_force(x, y, 0, -1200);
            with(obj_Rocketship) { move_up = true; } 
        }
    }
        else if (global.can_jump == true) &amp;&amp; (global.jump_draw &gt; 0) {
            air_timer = 0;
            global.jump_draw -= jump_incr;
            if(global.jump_draw &lt; 0) { global.jump_draw = 0; }
            global.can_jump = false;
            physics_apply_impulse(x, y, jump_x, global.jump_force);
            instance_create(x, y+16, obj_Jump_Effect);
            audio_play_sound(snd_Jump, 20, false);
            jumping = true;
        }
        
if(global.can_move == true) { alarm[6] = 8; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.blur = false;
global.incr = 0;
global.rocket_boost = false;
boost = false;
can_boost = true;
can_cooldown = true;
with (obj_Boost_Sparks) { incr = -10; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>set_moveR = true;
decel_count = 0;
moving = false; 

if global.biplane_joined == true {
    with(obj_BiPlane) { move_right = false; } 
}

if global.rocket_joined == true {
    with(obj_Rocketship) { move_right = false; } 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>set_moveL = true;
decel_count = 0;
moving = false; 

if global.biplane_joined == true {
    with(obj_BiPlane) { move_left = false; } 
}

if global.rocket_joined == true {
    with(obj_Rocketship) { move_left = false; } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[7] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[7] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(global.can_move == true) { alarm[6] = 3; }

if global.biplane_joined == true {
    jumping = false;
    with(obj_BiPlane) { move_up = false; } 
}

if global.rocket_joined == true {
    jumping = false;
    with (obj_Rocketship){ move_up = false; } 
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.0500000007450581</PhysicsObjectRestitution>
  <PhysicsObjectGroup>-1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>8</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.5</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>26,56</point>
    <point>14,32</point>
    <point>14,18</point>
    <point>26,8</point>
    <point>38,8</point>
    <point>50,18</point>
    <point>50,32</point>
    <point>38,56</point>
  </PhysicsShapePoints>
</object>
